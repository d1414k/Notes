// Simple techniques
// https://www.youtube.com/watch?v=5BzvEmscu-o
class Solution {
    class Pair{
        TreeNode root;
        int state;//0,1,2,3
        Pair(TreeNode root,int state){
            this.root = root;
            this.state = state;
        }
    }
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList();
        if(root == null)
            return res;
        Stack<Pair> stack = new Stack();
        stack.push(new Pair(root,0));
        while(!stack.isEmpty()){ 
            Pair cur = stack.peek();
            int state = cur.state; //System.out.println(stack+" "+cur.root.val+" "+state);
            if(state == 0){
                if(cur.root.left != null)
                    stack.push(new Pair(cur.root.left,0));
            }
            else if(state == 1) res.add(cur.root.val);
            else if(state == 2){
                if(cur.root.right != null)
                    stack.push(new Pair(cur.root.right,0));
            }
            else stack.pop();
            cur.state++;
        }
        return res;
    }
}

-----------+++++++++++++++++++++-----------------------------------------------------------------------------------------**********************-----------------

Morris inorder traversal
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList();
        TreeNode current = root;
        while(current != null){
            if(current.left == null){
                ans.add(current.val);
                current = current.right;
            }
            else{
                TreeNode predecessor = current.left;
                while(predecessor.right != current && predecessor.right !=null)
                    predecessor = predecessor.right;
                if(predecessor.right == null){
                    predecessor.right = current;// temporary link
                    current = current.left;
                }
                else{
                    predecessor.right = null;// remove temporary link
                    ans.add(current.val);
                    current = current.right;
                }
            }
        }
        return ans;
    }
}
