                                                        Segment Tree
https://www.youtube.com/watch?v=ZBHKZF5w4YU
https://www.geeksforgeeks.org/segment-tree-set-1-sum-of-given-range/

1. Segment tree is used for range query.(ex. max,min sum in range[5-20])
2. It takes O(n) time to create segment tree.
4. If we have n nums in an array and we want to create segment tree we need extra space to create this as follows
=> if n is power of 2 => n*2 -1
=> else (next power of 2)*2 - 1 
5. We will create above size array then call build method to create segment tree.
6. Segment tree will provide range query result in o(logn) times.( It will call at max 4 branches to get res so 4.logn => O(logn) ) 
7. In segment tree we can get Left child => 2*i + 1, Right Child => 2*i + 2, Parent => (i - 1)/2
8. In segment tree element at index 0 is called root of this tree.
9. All cells of tree array may not be used so we need to initialized with proper value to get correct ans.(For min query initialize with +INF,for max => -INF, for sum => 0)
10. while we are looking for range query there will be 3 cases between node range and query range; Node range can be
=> patial overloap    ; call this function on both child
=> total overlap      ; return node value
=> no overlap         ; return default value( min => +inf, max => -INF etc)
with Query range.

======================================>Implementaions:
1. Array based==============================================>
import java.util.*;
public class Main{
	public static void main(String[] args) {
		int []input = new int[]{-1,2,4,0,5};
		int n = 5;//input size
		SegmentTree obj = new SegmentTree(input);
		System.out.println("Min in range[0-3] is : "+obj.rangeMin(0,3));
	}
}

class SegmentTree{
    int tree[] = null;
    int size = 0;// size of input array
    SegmentTree(int []input){
    size = input.length;
    int nextPow = (int)Math.ceil(Math.log(size)/Math.log(2));
	int m = (int)Math.pow(2,nextPow)*2 - 1;// tree size
	tree = new int[m];
	Arrays.fill(tree,Integer.MAX_VALUE);
	build(input,0,size - 1,0);p(Arrays.toString(input)+"");p(Arrays.toString(tree)+"");
    }
    void build(int []input,int l,int h,int root){//p(l+" "+h+" "+root);
        if(l == h){
            tree[root] = input[l];
            return;
        }
        int mid = l + (h - l) / 2;
        build(input, l , mid, 2*root + 1);
        build(input, mid + 1, h , 2*root + 2);
        tree[root] = Math.min(tree[2*root + 1],tree[2*root + 2]);
    }
    int rangeMin(int l, int h){
        return rangeMinUtil(0,size - 1,0,l,h);
    }
    int rangeMinUtil(int low, int high,int root,int l,int h){
        if(l <= low && h >= high){//total overlap
            return tree[root];
        }
        if(l > high || h < low)// no overlap
            return Integer.MAX_VALUE;
        int mid = low + (high - low) / 2; 
        return Math.min(rangeMinUtil(low,mid,2*root+1,l,h),rangeMinUtil(mid+1,high,2*root + 2 ,l,h));
    }
    void p(String s){
        System.out.println(s);
    }
}
2. Node based ===================================>    https://leetcode.com/problems/range-sum-query-mutable/

class NumArray {
    class SegmentTree{
        int sum,start,end;
        SegmentTree left,right;
        SegmentTree(int start,int end,int sum){
            this.start = start;
            this.end = end;
            this.sum = sum;
        }
    }
    SegmentTree buildTree(int []nums, int low, int high){
        if(low > high)
            return null;
        if(low == high){
            return new SegmentTree(low,high,nums[low]);
        }
        int mid = low + (high - low) / 2;
        SegmentTree root = new SegmentTree(low,high,0);
        root.left = buildTree(nums,low,mid);
        root.right = buildTree(nums,mid + 1,high);
        root.sum = root.left.sum + root.right.sum;
        return root;
    }
    SegmentTree update(SegmentTree root, int index, int val){
        if(root.start > index || index > root.end)
            return root;
        if(root.start == root.end){
            if(root.start == index)
                root.sum = val;
            return root;
        }
        root.left = update(root.left,index,val);
        root.right = update(root.right,index,val);
        root.sum = root.left.sum + root.right.sum;
        return root;
    }
    int sumRange(SegmentTree root, int low, int high){
        if(root.start >= low && root.end <= high){//full overlap
            return root.sum;
        }
        if(root.end < low || root.start > high){//no overlap
            return 0;
        }
        return sumRange(root.left,low,high) + sumRange(root.right,low,high);
    }
    SegmentTree root = null;
    public NumArray(int[] nums) {
        root = buildTree(nums,0,nums.length - 1);
    }
    public void update(int i, int val) {
        update(root,i,val);
    }
    
    public int sumRange(int i, int j) {
        return sumRange(root,i,j);
    }
}


