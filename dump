No of BST with given height B and no of nodes A. 



public class Solution {
    public int cntPermBST(int A, int B) {
        return helper(B,A);
    }
    // [2,3]
    int helper(int h,int n){//p(h+" "+n);
        //base case
        if((n == 1 || n == 0) && h == 0) return 1;
        if(n == 0 || h >= n || h < (int)Math.floor(Math.log(n)/Math.log(2))) return 0;
        long ans = 0;
        for(int x = 0 ; x < n ; x++)
            for(int y = 0 ; y < n-1-x ; y++)
                ans = ans + helper(h-1,x) * helper(y,n-1-x)*2;
        return (int)ans;
    }
    void p(String s){
        System.out.println(s);
    }
}// https://www.interviewbit.com/mock-interview/
/*
#define MOD 1000000007ll
typedef long long LL;

//adds y to x, modulo MOD
void add(int &x, int y){
    x += y;
    if(x>=MOD)x-=MOD;
}

//choose and dp tables
vector<vector<int>> choose,dp;

//build choose table
void build(int N){
    choose[0][0]=1;
    for(int i=1; i<=2*N; i++){
        choose[i][0]=1;
        for(int j=1; j<=i; j++){
            choose[i][j]=choose[i-1][j];
            add(choose[i][j], choose[i-1][j-1]);
        }
    }
}

//reccurence function as defined in hint_2
int rec(int n, int h){ 
    if(n<=1)return (h==0);
    if(h<0)return 0;
    int &ret=dp[n][h];
    if(ret!=-1)return ret;
    ret=0;
    int x, y;
    for(int i=1; i<=n; i++){
        x=i-1;
        y=n-x-1;
        int sum1=0,sum2=0,ret1=0;
        for(int j=0; j<=h-2; j++){
            add(sum1, rec(x, j));
            add(sum2, rec(y, j));
        }
        add(ret1, ((LL)sum1*(LL)rec(y, h-1))%MOD);
        add(ret1, ((LL)sum2*(LL)rec(x, h-1))%MOD);
        add(ret1, ((LL)rec(x, h-1)*(LL)rec(y, h-1))%MOD);
        ret1 = ((LL)ret1*(LL)choose[x+y][y])%MOD;
        add(ret, ret1);
    }
    return ret;
}

int Solution::cntPermBST(int A, int B) {
    int n=50;
    choose.clear();
    dp.clear();
    choose.resize(2*n+1,vector<int>(2*n+1, 0));
    dp.resize(n+1,vector<int>(n+1, -1));
    build(n);
    return rec(A, B);
}
Hello! Looks like you’re enjoying the discussion, but you haven’t signed up for an account yet.

When you create an account, we remember exactly what you’ve read, so you always come right back where you left off. You also get notifications, here and via email, whenever someone replies to you. And you can like posts to share the love.
*/
